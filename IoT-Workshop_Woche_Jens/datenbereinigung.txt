import pandas as pd

df = pd.read_csv(
    'C:/Users/Workshop/Desktop/IoT-Workshop_Woche/ProdTag_12_05_2021.csv', sep=';')

df = df.reset_index()  # make sure indexes pair with number of rows


idList = [1]

werkstueckID = 1

counter = 1  # zählt die der werkstueckID bisher zugerordneten Zeilen. Wechselt die ID bevor der Counter bei 6 ist, wird für die Zeile 'error' eingetragen

errorCounter = 0

for index, row in df.iterrows():

    if index == 0:

        # falls es sich um die erste Zeile handelt, Inhalte speichern und mit nächster Iteration fortfahren
        lastRowList = [row['Produktvariante'], row['Prozessschritt'], row['Auftragsnummer'], row['Prozessbeschreibung'],
                       row['Prozessnummer'], row['Startdatum'], row['Startzeit'], row['Enddatum'], row['Endzeit'], row['Arbeitsstation'], row['Transportzeit']]
        continue

    if (row['Produktvariante'] == lastRowList[0]) & (row['Prozessschritt'] == lastRowList[1] + 10) & (row['Auftragsnummer'] == lastRowList[2]):

        idList.append(werkstueckID)
        counter += 1

    else:
        if counter < 6:
            for x in range(counter):
                idList[len(idList)-1 - x] = 'error'
                errorCounter+= 1

            # idList.append('error')

        werkstueckID += 1
        idList.append(werkstueckID)
        counter = 1

    lastRowList = [row['Produktvariante'], row['Prozessschritt'], row['Auftragsnummer'], row['Prozessbeschreibung'],
                   row['Prozessnummer'], row['Startdatum'], row['Startzeit'], row['Enddatum'], row['Endzeit'], row['Arbeitsstation'], row['Transportzeit']]

# print(idList)
# print(lastRowList[1])

# print(idList[100])

# Liste mit IDs und error hinzufügen
df['werkstueckID'] = idList

errorIndexList = []
errorPosition = 2

#print("errorCounter hat gezaehlt " + str(errorCounter))

for index, row in df.iterrows():
        if row['werkstueckID'] == 'error':
            errorIndexList.append(errorPosition)
        errorPosition += 1
    

#print(df.loc[df['werkstueckID'] == 'error'].info())

#print(df.loc[df['werkstueckID'] == 'error'])

#dfError = df[df['werkstueckID'] == 'error']

#dfError.to_csv('C:/Users/Workshop/Desktop/IoT-Workshop_Woche/errorList.csv', sep=';')

#df.to_csv('C:/Users/Workshop/Desktop/IoT-Workshop_Woche/ProdError.csv', sep=';')

#df.to_csv('/Users/JensRosenkranz/Downloads/errorList.csv', sep=';')

#dfError

#print(errorIndexList)
#print(len(errorIndexList))

#df.loc[min('Startzeit')]




#höchste ID von DF
# while error exists
#for each schleife iteriert durch alle zeilen des dfError
#WENN counter == 6 dannn counter erhöhen

#WENN bleibe stehen bei erster zeile des Prozesssschritt 10 welche auf error steht und minimaler Startzeit
 #   wenn das zutrifft vergibt die nächst höchste ID; counter erhöhen
#WENN zeile mit Arbeitsschritt 20, die auf error steht mit gleicher Produktvartiante und Auftragsnummer und minimaler startzeit
#... if bedingung für alle Arbeitsschritte ; counter erhöhen
#WENN Arbeitsshritt 60 erreicht und ID vergeben wurde; counter erhöhen"""

#Startzeit zu datetime konvertieren
df['Startzeit']=pd.to_datetime(df['Startzeit'])
dfError['Startzeit']=pd.to_datetime(dfError['Startzeit'])



#Variable iteriert duch alle Arbeitsschritte
PScounter = 10

#for-Schleife sucht Arbeitsschritt 10 mit minimaler Startzeit
#for row in dfError.iterrows():
    
    #falls es sich um den gesuchten Prozesssschritt mit minimaler Startzeit handelt
#    if (row['Prozessschritt'] == PScounter) & (row['werkstueckID'] == 'error'):
        #Arbeitsschritt 10, gültige ID eintragen
    
        #for-Schleife sucht 20,30,40,50,60
#        for row in dfError.iterrow():
            #aktuelle werkstueckID in Zeile werkstueckID eintragen
            #gültige ID eintragen
#       PScounter +=10
    
currentID = 1000

######################
#######ACHTUNG: Nullwerte löschen
#####################


#while error exists
#while ('error' in df.values) | (currentID <= 1002) :
while currentID <= 1002:
    #print("\nThis value exists in Dataframe")
    
    #for-Schleife die jeden der 6 Prozessschritte durchläuft
    for x in range(6):
        #df[(df['Prozessschritt']==20)  & (df['werkstueckID'] == 'error')].nsmallest(1, 'Startzeit')
        getIndex = str(df[(df['Prozessschritt']==(x+1)*10)  & (df['werkstueckID'] == 'error')].nsmallest(1, 'Startzeit').index)
        
        #Ausgabe des Index auf den Integerwert kürzen
        leftstripIndex = getIndex.strip('Int64Index([')
        rightstripIndex = leftstripIndex.strip("], dtype='int64')")
        intIndex = int(rightstripIndex)

        #row des df an der Stelle des Index auf aktuelle ID updaten
        df.at[intIndex, 'werkstueckID'] = currentID  
    currentID+=1

        #df.at[getIndex, 'werkstueckID'] = 1000

print(df[df['werkstueckID'] == 1000])

#####TEST#### Ausgabe eines bestimmten Arbeitsschritts mit kleinster Startzeit
#print(df[(df['Prozessschritt']==30)  & (df['werkstueckID'] == 'error')].nsmallest(1, 'Startzeit'))
#####TEST####

#df.at[df[(df['Prozessschritt']==20)  & (df['werkstueckID'] == 'error')].nsmallest(1, 'Startzeit').index, 'werkstueckID']
        
#für jeden Prozessschritt denjenigen mit minimaler Startzeit suchen und ID eintragen




#dfError[(dfError['Startzeit'].min()) & (dfError['Arbeitsschritt'] == AScounter) 

#dfError.loc[(dfError['Startzeit'].min()) & (dfError['Prozessschritt'] == 20)]



#dfError['Prozessschritt'] == 20

#dfError['Startzeit'].min(axis = 1)


#dfError.loc[dfError['Startzeit'].min()]

#dfError.loc[dfError['Prozessschritt'] == 20]


#nach Arbeitsschritten filtern und in neuem df speichern
#neuen df nach Darum sortieren und aufsteigend durchnummerieren (beginnend mit höchster ID aus orginal df)
#das mit jedem Arbeitsschritt durchführen
#

#dfNew = dfError[dfError['Prozessschritt'] == 10]

#idCounter = 1000

#for i,row in dfNew.iterrows():
#    dfNew.ix[i]['werkstueckID'] = idCounter
#    idCounter +=1
    
#    row['werkstueckID'] = idCounter
#    idCounter +=1

#dfNew
